{"version":3,"sources":["components/AddPerson/AddPerson.js","components/Person/Person.js","components/Input/Input.js","containers/Persons.js","store/action.js","App.js","serviceWorker.js","store/inputReducer.js","store/actionReducer.js","index.js"],"names":["AddPerson","personAdded","Fragment","onClick","Person","id","name","age","clicked","className","Input","onChange","placeholder","value","autoFocus","type","e","Persons","this","props","onAddName","target","onAddAge","onAddPerson","onInputClear","persons","map","person","key","onRemovePerson","Component","connect","state","action","input","dispatch","App","Boolean","window","location","hostname","match","initializeState","rootReducer","newPerson","Math","random","concat","newPersonList","filter","combineReducers","inputReducer","actionReducer","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9f4ce12c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './AddPerson.css';\r\n\r\nconst AddPerson = ({ personAdded }) => {\r\n  return (\r\n    <React.Fragment>\r\n      <button onClick={personAdded}>\r\n        <span>Add Person </span>\r\n      </button>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default AddPerson;\r\n","import React from 'react';\r\n\r\nimport './Person.css';\r\n\r\nconst Person = ({ id, name, age, clicked }) => {\r\n  return (\r\n    <div className=\"person\" onClick={clicked}>\r\n      <div className=\"personName\">{name}</div>\r\n      <div>Age: {age}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Person;","import React from 'react';\r\nimport './Input.css';\r\n\r\nconst Input = ({ name, onChange, placeholder, value, autoFocus }) => {\r\n  return (\r\n    <input\r\n      type='text'\r\n      name={name}\r\n      value={value}\r\n      onChange={(e) => onChange(e)}\r\n      placeholder={placeholder}\r\n      autoFocus={autoFocus}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actionType from '../store/action';\r\n\r\nimport AddPerson from '../components/AddPerson/AddPerson';\r\nimport Person from '../components/Person/Person';\r\nimport Input from '../components/Input/Input';\r\n\r\nclass Persons extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Input\r\n          name='name'\r\n          placeholder='Name'\r\n          value={this.props.name}\r\n          onChange={(e) => this.props.onAddName(e.target.value)}\r\n          autoFocus={true}\r\n        />\r\n        <Input\r\n          name='age'\r\n          placeholder='Age'\r\n          value={this.props.age}\r\n          onChange={(e) => this.props.onAddAge(e.target.value)}\r\n        />\r\n        <AddPerson\r\n          personAdded={() => {\r\n            this.props.onAddPerson({ name: this.props.name, age: this.props.age });\r\n            this.props.onInputClear();\r\n          }}\r\n        />\r\n        {(this.props.persons || []).map((person) => (\r\n          <Person\r\n            key={person.id}\r\n            name={person.name}\r\n            age={person.age}\r\n            clicked={() => {\r\n              this.props.onRemovePerson(person.id);\r\n            }}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    persons: state.action.persons,\r\n    name: state.input.name,\r\n    age: state.input.age\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onAddPerson: (person) => dispatch({ type: actionType.ADD_PERSON, value: person }),\r\n    onRemovePerson: (person) => dispatch({ type: actionType.REM_PERSON, value: person }),\r\n    onAddName: (name) => dispatch({ type: actionType.ADD_NAME, value: name }),\r\n    onAddAge: (age) => dispatch({ type: actionType.ADD_AGE, value: age }),\r\n    onInputClear: () => dispatch({ type: actionType.CLEAR })\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Persons);\r\n","export const ADD_PERSON = 'ADD_PERSON';\r\nexport const REM_PERSON = 'REM_PERSON';\r\nexport const ADD_NAME = 'ADD_NAME';\r\nexport const ADD_AGE = 'ADD_AGE';\r\nexport const CLEAR = 'CLEAR';\r\n","import React from 'react';\nimport './App.css';\n\nimport Persons from './containers/Persons';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Persons />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actionType from './action';\r\n\r\nconst initializeState = {\r\n  name: '',\r\n  age: ''\r\n};\r\n\r\nconst rootReducer = (state = initializeState, action) => {\r\n  switch (action.type) {\r\n    case actionType.ADD_NAME:\r\n      return {\r\n        ...state,\r\n        name: action.value\r\n      };\r\n    case actionType.ADD_AGE:\r\n      return {\r\n        ...state,\r\n        age: action.value\r\n      };\r\n    case actionType.CLEAR:\r\n      return {\r\n        ...state,\r\n        name: '',\r\n        age: ''\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default rootReducer;\r\n","import * as actionType from './action';\r\n\r\nconst initializeState = {\r\n  persons: []\r\n};\r\n\r\nconst rootReducer = (state = initializeState, action) => {\r\n  switch (action.type) {\r\n    case actionType.ADD_PERSON:\r\n      const newPerson = {\r\n        id: Math.random(),\r\n        name: action.value.name,\r\n        age: action.value.age\r\n      };\r\n      return {\r\n        ...state,\r\n        persons: state.persons.concat(newPerson)\r\n      };\r\n    case actionType.REM_PERSON:\r\n      const newPersonList = state.persons.filter((person) => person.id !== action.value);\r\n      return {\r\n        ...state,\r\n        persons: newPersonList\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default rootReducer;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, combineReducers } from 'redux';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport inputReducer from './store/inputReducer';\nimport actionReducer from './store/actionReducer';\n\nconst rootReducer = combineReducers({\n  input: inputReducer,\n  action: actionReducer\n});\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}